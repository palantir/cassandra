/*
 * (c) Copyright 2018 Palantir Technologies Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def rewriteGroup = { group ->
    if (group == 'org.apache.cassandra') {
        return 'com.palantir.cassandra'
    } else {
        return group
    }
}

def processModule = { module, moduleNode ->
    moduleNode.appendNode('groupId', rewriteGroup(module.groupId))
    moduleNode.appendNode('artifactId', module.artifactId)
    if (module.version.size() > 0) {
        moduleNode.appendNode('version', module.version)
    }
}

def processDependency = { dep, dependenciesNode ->
    def dependencyNode = dependenciesNode.appendNode('dependency')
    processModule(dep, dependencyNode)

    if (dep.exclusions.size() > 0) {
        def exclusionsNode = dependencyNode.appendNode('exclusions')
        dep.exclusions.exclusion.each { exclusion ->
            def exclusionNode = exclusionsNode.appendNode('exclusion')
            processModule(exclusion, exclusionNode)
        }
    }

    if (dep.optional.size() > 0) {
        dependencyNode.appendNode('optional', dep.optional)
    }

    if (dep.scope.size() > 0) {
        dependencyNode.appendNode('scope', dep.scope)
    }
}

ext.generatePomFromExisting = { xmlRootNode, existingPomPath ->
    def existingPom = new XmlSlurper().parse(file(existingPomPath))

    def dependenciesNode = xmlRootNode.appendNode('dependencies')
    existingPom.dependencies.dependency.each { dep -> processDependency(dep, dependenciesNode) }
}

ext.generateBomFromExisting = { xmlRootNode, existingPomPath ->
    def existingPom = new XmlSlurper().parse(file(existingPomPath))

    def dependencyManagementNode = xmlRootNode.appendNode('dependencyManagement').appendNode('dependencies')
    existingPom.dependencyManagement.dependencies.dependency.each { dep -> processDependency(dep, dependencyManagementNode) }
}

