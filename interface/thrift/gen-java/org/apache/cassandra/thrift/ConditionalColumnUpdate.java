/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.cassandra.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * A pair of two columns.
 * It is expected that the columns provided have the same key.
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2021-11-24")
public class ConditionalColumnUpdate implements org.apache.thrift.TBase<ConditionalColumnUpdate, ConditionalColumnUpdate._Fields>, java.io.Serializable, Cloneable, Comparable<ConditionalColumnUpdate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConditionalColumnUpdate");

  private static final org.apache.thrift.protocol.TField EXPECTED_FIELD_DESC = new org.apache.thrift.protocol.TField("expected", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("update", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ConditionalColumnUpdateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ConditionalColumnUpdateTupleSchemeFactory());
  }

  public Column expected; // optional
  public Column update; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXPECTED((short)1, "expected"),
    UPDATE((short)2, "update");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPECTED
          return EXPECTED;
        case 2: // UPDATE
          return UPDATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.EXPECTED,_Fields.UPDATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPECTED, new org.apache.thrift.meta_data.FieldMetaData("expected", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Column.class)));
    tmpMap.put(_Fields.UPDATE, new org.apache.thrift.meta_data.FieldMetaData("update", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Column.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConditionalColumnUpdate.class, metaDataMap);
  }

  public ConditionalColumnUpdate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConditionalColumnUpdate(ConditionalColumnUpdate other) {
    if (other.isSetExpected()) {
      this.expected = new Column(other.expected);
    }
    if (other.isSetUpdate()) {
      this.update = new Column(other.update);
    }
  }

  public ConditionalColumnUpdate deepCopy() {
    return new ConditionalColumnUpdate(this);
  }

  @Override
  public void clear() {
    this.expected = null;
    this.update = null;
  }

  public Column getExpected() {
    return this.expected;
  }

  public ConditionalColumnUpdate setExpected(Column expected) {
    this.expected = expected;
    return this;
  }

  public void unsetExpected() {
    this.expected = null;
  }

  /** Returns true if field expected is set (has been assigned a value) and false otherwise */
  public boolean isSetExpected() {
    return this.expected != null;
  }

  public void setExpectedIsSet(boolean value) {
    if (!value) {
      this.expected = null;
    }
  }

  public Column getUpdate() {
    return this.update;
  }

  public ConditionalColumnUpdate setUpdate(Column update) {
    this.update = update;
    return this;
  }

  public void unsetUpdate() {
    this.update = null;
  }

  /** Returns true if field update is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate() {
    return this.update != null;
  }

  public void setUpdateIsSet(boolean value) {
    if (!value) {
      this.update = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXPECTED:
      if (value == null) {
        unsetExpected();
      } else {
        setExpected((Column)value);
      }
      break;

    case UPDATE:
      if (value == null) {
        unsetUpdate();
      } else {
        setUpdate((Column)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPECTED:
      return getExpected();

    case UPDATE:
      return getUpdate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXPECTED:
      return isSetExpected();
    case UPDATE:
      return isSetUpdate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConditionalColumnUpdate)
      return this.equals((ConditionalColumnUpdate)that);
    return false;
  }

  public boolean equals(ConditionalColumnUpdate that) {
    if (that == null)
      return false;

    boolean this_present_expected = true && this.isSetExpected();
    boolean that_present_expected = true && that.isSetExpected();
    if (this_present_expected || that_present_expected) {
      if (!(this_present_expected && that_present_expected))
        return false;
      if (!this.expected.equals(that.expected))
        return false;
    }

    boolean this_present_update = true && this.isSetUpdate();
    boolean that_present_update = true && that.isSetUpdate();
    if (this_present_update || that_present_update) {
      if (!(this_present_update && that_present_update))
        return false;
      if (!this.update.equals(that.update))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_expected = true && (isSetExpected());
    list.add(present_expected);
    if (present_expected)
      list.add(expected);

    boolean present_update = true && (isSetUpdate());
    list.add(present_update);
    if (present_update)
      list.add(update);

    return list.hashCode();
  }

  @Override
  public int compareTo(ConditionalColumnUpdate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExpected()).compareTo(other.isSetExpected());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpected()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expected, other.expected);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate()).compareTo(other.isSetUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update, other.update);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConditionalColumnUpdate(");
    boolean first = true;

    if (isSetExpected()) {
      sb.append("expected:");
      if (this.expected == null) {
        sb.append("null");
      } else {
        sb.append(this.expected);
      }
      first = false;
    }
    if (isSetUpdate()) {
      if (!first) sb.append(", ");
      sb.append("update:");
      if (this.update == null) {
        sb.append("null");
      } else {
        sb.append(this.update);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (expected != null) {
      expected.validate();
    }
    if (update != null) {
      update.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConditionalColumnUpdateStandardSchemeFactory implements SchemeFactory {
    public ConditionalColumnUpdateStandardScheme getScheme() {
      return new ConditionalColumnUpdateStandardScheme();
    }
  }

  private static class ConditionalColumnUpdateStandardScheme extends StandardScheme<ConditionalColumnUpdate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConditionalColumnUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPECTED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.expected = new Column();
              struct.expected.read(iprot);
              struct.setExpectedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.update = new Column();
              struct.update.read(iprot);
              struct.setUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConditionalColumnUpdate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.expected != null) {
        if (struct.isSetExpected()) {
          oprot.writeFieldBegin(EXPECTED_FIELD_DESC);
          struct.expected.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.update != null) {
        if (struct.isSetUpdate()) {
          oprot.writeFieldBegin(UPDATE_FIELD_DESC);
          struct.update.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConditionalColumnUpdateTupleSchemeFactory implements SchemeFactory {
    public ConditionalColumnUpdateTupleScheme getScheme() {
      return new ConditionalColumnUpdateTupleScheme();
    }
  }

  private static class ConditionalColumnUpdateTupleScheme extends TupleScheme<ConditionalColumnUpdate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConditionalColumnUpdate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExpected()) {
        optionals.set(0);
      }
      if (struct.isSetUpdate()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetExpected()) {
        struct.expected.write(oprot);
      }
      if (struct.isSetUpdate()) {
        struct.update.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConditionalColumnUpdate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.expected = new Column();
        struct.expected.read(iprot);
        struct.setExpectedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.update = new Column();
        struct.update.read(iprot);
        struct.setUpdateIsSet(true);
      }
    }
  }

}

