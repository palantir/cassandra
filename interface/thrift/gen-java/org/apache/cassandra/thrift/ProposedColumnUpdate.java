/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.cassandra.thrift;
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProposedColumnUpdate implements org.apache.thrift.TBase<ProposedColumnUpdate, ProposedColumnUpdate._Fields>, java.io.Serializable, Cloneable, Comparable<ProposedColumnUpdate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProposedColumnUpdate");

  private static final org.apache.thrift.protocol.TField EXPECTED_COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("expected_column_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXPECTED_COLUMN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("expected_column_value", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROPOSED_COLUMN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("proposed_column_value", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProposedColumnUpdateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProposedColumnUpdateTupleSchemeFactory());
  }

  public ByteBuffer expected_column_name; // optional
  public ByteBuffer expected_column_value; // optional
  public ByteBuffer proposed_column_value; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXPECTED_COLUMN_NAME((short)1, "expected_column_name"),
    EXPECTED_COLUMN_VALUE((short)2, "expected_column_value"),
    PROPOSED_COLUMN_VALUE((short)3, "proposed_column_value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPECTED_COLUMN_NAME
          return EXPECTED_COLUMN_NAME;
        case 2: // EXPECTED_COLUMN_VALUE
          return EXPECTED_COLUMN_VALUE;
        case 3: // PROPOSED_COLUMN_VALUE
          return PROPOSED_COLUMN_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.EXPECTED_COLUMN_NAME,_Fields.EXPECTED_COLUMN_VALUE,_Fields.PROPOSED_COLUMN_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPECTED_COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("expected_column_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.EXPECTED_COLUMN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("expected_column_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PROPOSED_COLUMN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("proposed_column_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProposedColumnUpdate.class, metaDataMap);
  }

  public ProposedColumnUpdate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProposedColumnUpdate(ProposedColumnUpdate other) {
    if (other.isSetExpected_column_name()) {
      this.expected_column_name = org.apache.thrift.TBaseHelper.copyBinary(other.expected_column_name);
    }
    if (other.isSetExpected_column_value()) {
      this.expected_column_value = org.apache.thrift.TBaseHelper.copyBinary(other.expected_column_value);
    }
    if (other.isSetProposed_column_value()) {
      this.proposed_column_value = org.apache.thrift.TBaseHelper.copyBinary(other.proposed_column_value);
    }
  }

  public ProposedColumnUpdate deepCopy() {
    return new ProposedColumnUpdate(this);
  }

  @Override
  public void clear() {
    this.expected_column_name = null;
    this.expected_column_value = null;
    this.proposed_column_value = null;
  }

  public byte[] getExpected_column_name() {
    setExpected_column_name(org.apache.thrift.TBaseHelper.rightSize(expected_column_name));
    return expected_column_name == null ? null : expected_column_name.array();
  }

  public ByteBuffer bufferForExpected_column_name() {
    return org.apache.thrift.TBaseHelper.copyBinary(expected_column_name);
  }

  public ProposedColumnUpdate setExpected_column_name(byte[] expected_column_name) {
    this.expected_column_name = expected_column_name == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(expected_column_name, expected_column_name.length));
    return this;
  }

  public ProposedColumnUpdate setExpected_column_name(ByteBuffer expected_column_name) {
    this.expected_column_name = org.apache.thrift.TBaseHelper.copyBinary(expected_column_name);
    return this;
  }

  public void unsetExpected_column_name() {
    this.expected_column_name = null;
  }

  /** Returns true if field expected_column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetExpected_column_name() {
    return this.expected_column_name != null;
  }

  public void setExpected_column_nameIsSet(boolean value) {
    if (!value) {
      this.expected_column_name = null;
    }
  }

  public byte[] getExpected_column_value() {
    setExpected_column_value(org.apache.thrift.TBaseHelper.rightSize(expected_column_value));
    return expected_column_value == null ? null : expected_column_value.array();
  }

  public ByteBuffer bufferForExpected_column_value() {
    return org.apache.thrift.TBaseHelper.copyBinary(expected_column_value);
  }

  public ProposedColumnUpdate setExpected_column_value(byte[] expected_column_value) {
    this.expected_column_value = expected_column_value == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(expected_column_value, expected_column_value.length));
    return this;
  }

  public ProposedColumnUpdate setExpected_column_value(ByteBuffer expected_column_value) {
    this.expected_column_value = org.apache.thrift.TBaseHelper.copyBinary(expected_column_value);
    return this;
  }

  public void unsetExpected_column_value() {
    this.expected_column_value = null;
  }

  /** Returns true if field expected_column_value is set (has been assigned a value) and false otherwise */
  public boolean isSetExpected_column_value() {
    return this.expected_column_value != null;
  }

  public void setExpected_column_valueIsSet(boolean value) {
    if (!value) {
      this.expected_column_value = null;
    }
  }

  public byte[] getProposed_column_value() {
    setProposed_column_value(org.apache.thrift.TBaseHelper.rightSize(proposed_column_value));
    return proposed_column_value == null ? null : proposed_column_value.array();
  }

  public ByteBuffer bufferForProposed_column_value() {
    return org.apache.thrift.TBaseHelper.copyBinary(proposed_column_value);
  }

  public ProposedColumnUpdate setProposed_column_value(byte[] proposed_column_value) {
    this.proposed_column_value = proposed_column_value == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(proposed_column_value, proposed_column_value.length));
    return this;
  }

  public ProposedColumnUpdate setProposed_column_value(ByteBuffer proposed_column_value) {
    this.proposed_column_value = org.apache.thrift.TBaseHelper.copyBinary(proposed_column_value);
    return this;
  }

  public void unsetProposed_column_value() {
    this.proposed_column_value = null;
  }

  /** Returns true if field proposed_column_value is set (has been assigned a value) and false otherwise */
  public boolean isSetProposed_column_value() {
    return this.proposed_column_value != null;
  }

  public void setProposed_column_valueIsSet(boolean value) {
    if (!value) {
      this.proposed_column_value = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXPECTED_COLUMN_NAME:
      if (value == null) {
        unsetExpected_column_name();
      } else {
        setExpected_column_name((ByteBuffer)value);
      }
      break;

    case EXPECTED_COLUMN_VALUE:
      if (value == null) {
        unsetExpected_column_value();
      } else {
        setExpected_column_value((ByteBuffer)value);
      }
      break;

    case PROPOSED_COLUMN_VALUE:
      if (value == null) {
        unsetProposed_column_value();
      } else {
        setProposed_column_value((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPECTED_COLUMN_NAME:
      return getExpected_column_name();

    case EXPECTED_COLUMN_VALUE:
      return getExpected_column_value();

    case PROPOSED_COLUMN_VALUE:
      return getProposed_column_value();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXPECTED_COLUMN_NAME:
      return isSetExpected_column_name();
    case EXPECTED_COLUMN_VALUE:
      return isSetExpected_column_value();
    case PROPOSED_COLUMN_VALUE:
      return isSetProposed_column_value();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProposedColumnUpdate)
      return this.equals((ProposedColumnUpdate)that);
    return false;
  }

  public boolean equals(ProposedColumnUpdate that) {
    if (that == null)
      return false;

    boolean this_present_expected_column_name = true && this.isSetExpected_column_name();
    boolean that_present_expected_column_name = true && that.isSetExpected_column_name();
    if (this_present_expected_column_name || that_present_expected_column_name) {
      if (!(this_present_expected_column_name && that_present_expected_column_name))
        return false;
      if (!this.expected_column_name.equals(that.expected_column_name))
        return false;
    }

    boolean this_present_expected_column_value = true && this.isSetExpected_column_value();
    boolean that_present_expected_column_value = true && that.isSetExpected_column_value();
    if (this_present_expected_column_value || that_present_expected_column_value) {
      if (!(this_present_expected_column_value && that_present_expected_column_value))
        return false;
      if (!this.expected_column_value.equals(that.expected_column_value))
        return false;
    }

    boolean this_present_proposed_column_value = true && this.isSetProposed_column_value();
    boolean that_present_proposed_column_value = true && that.isSetProposed_column_value();
    if (this_present_proposed_column_value || that_present_proposed_column_value) {
      if (!(this_present_proposed_column_value && that_present_proposed_column_value))
        return false;
      if (!this.proposed_column_value.equals(that.proposed_column_value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_expected_column_name = true && (isSetExpected_column_name());
    builder.append(present_expected_column_name);
    if (present_expected_column_name)
      builder.append(expected_column_name);

    boolean present_expected_column_value = true && (isSetExpected_column_value());
    builder.append(present_expected_column_value);
    if (present_expected_column_value)
      builder.append(expected_column_value);

    boolean present_proposed_column_value = true && (isSetProposed_column_value());
    builder.append(present_proposed_column_value);
    if (present_proposed_column_value)
      builder.append(proposed_column_value);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(ProposedColumnUpdate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExpected_column_name()).compareTo(other.isSetExpected_column_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpected_column_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expected_column_name, other.expected_column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpected_column_value()).compareTo(other.isSetExpected_column_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpected_column_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expected_column_value, other.expected_column_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProposed_column_value()).compareTo(other.isSetProposed_column_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProposed_column_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proposed_column_value, other.proposed_column_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProposedColumnUpdate(");
    boolean first = true;

    if (isSetExpected_column_name()) {
      sb.append("expected_column_name:");
      if (this.expected_column_name == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.expected_column_name, sb);
      }
      first = false;
    }
    if (isSetExpected_column_value()) {
      if (!first) sb.append(", ");
      sb.append("expected_column_value:");
      if (this.expected_column_value == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.expected_column_value, sb);
      }
      first = false;
    }
    if (isSetProposed_column_value()) {
      if (!first) sb.append(", ");
      sb.append("proposed_column_value:");
      if (this.proposed_column_value == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.proposed_column_value, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProposedColumnUpdateStandardSchemeFactory implements SchemeFactory {
    public ProposedColumnUpdateStandardScheme getScheme() {
      return new ProposedColumnUpdateStandardScheme();
    }
  }

  private static class ProposedColumnUpdateStandardScheme extends StandardScheme<ProposedColumnUpdate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProposedColumnUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPECTED_COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expected_column_name = iprot.readBinary();
              struct.setExpected_column_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPECTED_COLUMN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.expected_column_value = iprot.readBinary();
              struct.setExpected_column_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROPOSED_COLUMN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.proposed_column_value = iprot.readBinary();
              struct.setProposed_column_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProposedColumnUpdate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.expected_column_name != null) {
        if (struct.isSetExpected_column_name()) {
          oprot.writeFieldBegin(EXPECTED_COLUMN_NAME_FIELD_DESC);
          oprot.writeBinary(struct.expected_column_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.expected_column_value != null) {
        if (struct.isSetExpected_column_value()) {
          oprot.writeFieldBegin(EXPECTED_COLUMN_VALUE_FIELD_DESC);
          oprot.writeBinary(struct.expected_column_value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.proposed_column_value != null) {
        if (struct.isSetProposed_column_value()) {
          oprot.writeFieldBegin(PROPOSED_COLUMN_VALUE_FIELD_DESC);
          oprot.writeBinary(struct.proposed_column_value);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProposedColumnUpdateTupleSchemeFactory implements SchemeFactory {
    public ProposedColumnUpdateTupleScheme getScheme() {
      return new ProposedColumnUpdateTupleScheme();
    }
  }

  private static class ProposedColumnUpdateTupleScheme extends TupleScheme<ProposedColumnUpdate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProposedColumnUpdate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExpected_column_name()) {
        optionals.set(0);
      }
      if (struct.isSetExpected_column_value()) {
        optionals.set(1);
      }
      if (struct.isSetProposed_column_value()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetExpected_column_name()) {
        oprot.writeBinary(struct.expected_column_name);
      }
      if (struct.isSetExpected_column_value()) {
        oprot.writeBinary(struct.expected_column_value);
      }
      if (struct.isSetProposed_column_value()) {
        oprot.writeBinary(struct.proposed_column_value);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProposedColumnUpdate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.expected_column_name = iprot.readBinary();
        struct.setExpected_column_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.expected_column_value = iprot.readBinary();
        struct.setExpected_column_valueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.proposed_column_value = iprot.readBinary();
        struct.setProposed_column_valueIsSet(true);
      }
    }
  }

}

